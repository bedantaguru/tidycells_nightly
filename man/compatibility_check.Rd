% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compatibility_check.R
\name{compatibility_check}
\alias{compatibility_check}
\title{A lightweight function for compatibility test}
\usage{
compatibility_check(expr, old_version, pkg = "tidycells",
  repo = default_repo(), warn_outdated = TRUE, use_lambda = FALSE)
}
\arguments{
\item{expr}{expression to run}

\item{old_version}{(Optional) old version of the package to test. (If omitted CRAN version will be used)}

\item{pkg}{The package (Default is this package)}

\item{repo}{The CRAN repo to download from}

\item{warn_outdated}{whether to warn user if the package version is outdated (Default is \code{TRUE})}

\item{use_lambda}{whether to use \code{purr} / \code{rlang} like lambda expression (Default is \code{FALSE})}
}
\value{
A list containing output with corresponding version and indicator whether results do match or not.
}
\description{
\strong{compatibility form same package is not possible hence removing it in future dev version}

Convenience function for testing compatibility / dependability on a package over two  different versions.
It simply runs supplied expression (\code{expr}) under two different version of the package. It can either to backward or forward
version comparison with the installed version. If \code{old_version} is specified then it will compare the expression
evaluation on that version and installed version. If nothing is specified in version, it will compare installed
version with latest available CRAN version.

\strong{Note:}
\itemize{
\item As of now, dependency management is not that great in this function. If a remote (either old or CRAN) version
depend on a package which is not installed currently then it will fail to install the package. Maybe that will
be taken care of in next versions of the function. (to reproduce, test using
\code{compatibility_check(dplyr::group_split, pkg = "dplyr", old_version = "0.7.6")}, removing \code{bindrcpp} package (if
you have it). You should have \code{dplyr 0.8.3} as present package.)
\item Also, this feature is not quite related to package philosophy and potentially will be shifted to different package
designated to solve the issue at hand.
\item This should be dependent on \code{remotes} package. However, since it will introduce a new layer of dependency it is not
made depend on it. Maybe this can be done in separate dedicated package.
}
}
\examples{
\dontrun{
compatibility_check(cli::cli_sitrep(), pkg = "cli", old_version = "1.0.0")
}
}
\keyword{internal}
